=== tests/cases/conformance/types/objectTypeLiteral/constructSignatures/constructSignaturesWithAbstractOverloads.2.ts ===
interface C {
>C : Symbol(C, Decl(constructSignaturesWithAbstractOverloads.2.ts, 0, 0))
}

interface C2<T> {
>C2 : Symbol(C2, Decl(constructSignaturesWithAbstractOverloads.2.ts, 1, 1))
>T : Symbol(T, Decl(constructSignaturesWithAbstractOverloads.2.ts, 3, 13))
}

interface I {
>I : Symbol(I, Decl(constructSignaturesWithAbstractOverloads.2.ts, 4, 1))

    abstract new(x: number, y?: string): C;
>x : Symbol(x, Decl(constructSignaturesWithAbstractOverloads.2.ts, 7, 17))
>y : Symbol(y, Decl(constructSignaturesWithAbstractOverloads.2.ts, 7, 27))
>C : Symbol(C, Decl(constructSignaturesWithAbstractOverloads.2.ts, 0, 0))

    new(x: number, y: string): C;
>x : Symbol(x, Decl(constructSignaturesWithAbstractOverloads.2.ts, 8, 8))
>y : Symbol(y, Decl(constructSignaturesWithAbstractOverloads.2.ts, 8, 18))
>C : Symbol(C, Decl(constructSignaturesWithAbstractOverloads.2.ts, 0, 0))
}

var i: I;
>i : Symbol(i, Decl(constructSignaturesWithAbstractOverloads.2.ts, 11, 3))
>I : Symbol(I, Decl(constructSignaturesWithAbstractOverloads.2.ts, 4, 1))

var r3 = new i(1, '');
>r3 : Symbol(r3, Decl(constructSignaturesWithAbstractOverloads.2.ts, 12, 3))
>i : Symbol(i, Decl(constructSignaturesWithAbstractOverloads.2.ts, 11, 3))

interface I2<T> {
>I2 : Symbol(I2, Decl(constructSignaturesWithAbstractOverloads.2.ts, 12, 22))
>T : Symbol(T, Decl(constructSignaturesWithAbstractOverloads.2.ts, 14, 13))

    abstract new (x: T, y?: string): C2<T>;
>x : Symbol(x, Decl(constructSignaturesWithAbstractOverloads.2.ts, 15, 18))
>T : Symbol(T, Decl(constructSignaturesWithAbstractOverloads.2.ts, 14, 13))
>y : Symbol(y, Decl(constructSignaturesWithAbstractOverloads.2.ts, 15, 23))
>C2 : Symbol(C2, Decl(constructSignaturesWithAbstractOverloads.2.ts, 1, 1))
>T : Symbol(T, Decl(constructSignaturesWithAbstractOverloads.2.ts, 14, 13))

    new (x: T, y: string): C2<T>;
>x : Symbol(x, Decl(constructSignaturesWithAbstractOverloads.2.ts, 16, 9))
>T : Symbol(T, Decl(constructSignaturesWithAbstractOverloads.2.ts, 14, 13))
>y : Symbol(y, Decl(constructSignaturesWithAbstractOverloads.2.ts, 16, 14))
>C2 : Symbol(C2, Decl(constructSignaturesWithAbstractOverloads.2.ts, 1, 1))
>T : Symbol(T, Decl(constructSignaturesWithAbstractOverloads.2.ts, 14, 13))

    abstract new <T>(x: T, y?: string): C2<T>;
>T : Symbol(T, Decl(constructSignaturesWithAbstractOverloads.2.ts, 17, 18))
>x : Symbol(x, Decl(constructSignaturesWithAbstractOverloads.2.ts, 17, 21))
>T : Symbol(T, Decl(constructSignaturesWithAbstractOverloads.2.ts, 17, 18))
>y : Symbol(y, Decl(constructSignaturesWithAbstractOverloads.2.ts, 17, 26))
>C2 : Symbol(C2, Decl(constructSignaturesWithAbstractOverloads.2.ts, 1, 1))
>T : Symbol(T, Decl(constructSignaturesWithAbstractOverloads.2.ts, 17, 18))

    new <T>(x: T, y: string): C2<T>;
>T : Symbol(T, Decl(constructSignaturesWithAbstractOverloads.2.ts, 18, 9))
>x : Symbol(x, Decl(constructSignaturesWithAbstractOverloads.2.ts, 18, 12))
>T : Symbol(T, Decl(constructSignaturesWithAbstractOverloads.2.ts, 18, 9))
>y : Symbol(y, Decl(constructSignaturesWithAbstractOverloads.2.ts, 18, 17))
>C2 : Symbol(C2, Decl(constructSignaturesWithAbstractOverloads.2.ts, 1, 1))
>T : Symbol(T, Decl(constructSignaturesWithAbstractOverloads.2.ts, 18, 9))

}

var i2: I2<number>;
>i2 : Symbol(i2, Decl(constructSignaturesWithAbstractOverloads.2.ts, 22, 3))
>I2 : Symbol(I2, Decl(constructSignaturesWithAbstractOverloads.2.ts, 12, 22))

var r4 = new i2(1, '');
>r4 : Symbol(r4, Decl(constructSignaturesWithAbstractOverloads.2.ts, 23, 3))
>i2 : Symbol(i2, Decl(constructSignaturesWithAbstractOverloads.2.ts, 22, 3))

var a: {
>a : Symbol(a, Decl(constructSignaturesWithAbstractOverloads.2.ts, 25, 3))

    abstract new(x: number, y?: string): C;
>x : Symbol(x, Decl(constructSignaturesWithAbstractOverloads.2.ts, 26, 17))
>y : Symbol(y, Decl(constructSignaturesWithAbstractOverloads.2.ts, 26, 27))
>C : Symbol(C, Decl(constructSignaturesWithAbstractOverloads.2.ts, 0, 0))

    new(x: number, y: string): C;
>x : Symbol(x, Decl(constructSignaturesWithAbstractOverloads.2.ts, 27, 8))
>y : Symbol(y, Decl(constructSignaturesWithAbstractOverloads.2.ts, 27, 18))
>C : Symbol(C, Decl(constructSignaturesWithAbstractOverloads.2.ts, 0, 0))
}

var r5 = new a(1, '');
>r5 : Symbol(r5, Decl(constructSignaturesWithAbstractOverloads.2.ts, 30, 3))
>a : Symbol(a, Decl(constructSignaturesWithAbstractOverloads.2.ts, 25, 3))

var b: {
>b : Symbol(b, Decl(constructSignaturesWithAbstractOverloads.2.ts, 32, 3))

    new<T>(x: T, y?: string): C2<T>;
>T : Symbol(T, Decl(constructSignaturesWithAbstractOverloads.2.ts, 33, 8))
>x : Symbol(x, Decl(constructSignaturesWithAbstractOverloads.2.ts, 33, 11))
>T : Symbol(T, Decl(constructSignaturesWithAbstractOverloads.2.ts, 33, 8))
>y : Symbol(y, Decl(constructSignaturesWithAbstractOverloads.2.ts, 33, 16))
>C2 : Symbol(C2, Decl(constructSignaturesWithAbstractOverloads.2.ts, 1, 1))
>T : Symbol(T, Decl(constructSignaturesWithAbstractOverloads.2.ts, 33, 8))

    abstract new<T>(x: T, y: string): C2<T>;
>T : Symbol(T, Decl(constructSignaturesWithAbstractOverloads.2.ts, 34, 17))
>x : Symbol(x, Decl(constructSignaturesWithAbstractOverloads.2.ts, 34, 20))
>T : Symbol(T, Decl(constructSignaturesWithAbstractOverloads.2.ts, 34, 17))
>y : Symbol(y, Decl(constructSignaturesWithAbstractOverloads.2.ts, 34, 25))
>C2 : Symbol(C2, Decl(constructSignaturesWithAbstractOverloads.2.ts, 1, 1))
>T : Symbol(T, Decl(constructSignaturesWithAbstractOverloads.2.ts, 34, 17))
}

var r6 = new b(1, '');
>r6 : Symbol(r6, Decl(constructSignaturesWithAbstractOverloads.2.ts, 37, 3))
>b : Symbol(b, Decl(constructSignaturesWithAbstractOverloads.2.ts, 32, 3))

